name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  DATABASE_PROVIDER: firebase

jobs:
  # Lint and Type Check
  lint-and-type-check:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🧹 Run ESLint
        run: npm run lint
      
      - name: 🔍 TypeScript type check
        run: npx tsc --noEmit
      
      - name: 🎨 Check code formatting
        run: npx prettier --check .

  # Test Database Services
  test-database:
    name: 🗄️ Test Database Services
    runs-on: ubuntu-latest
    
    services:
      # SQLite for Prisma testing
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shopify_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🔧 Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_PROVIDER=prisma" >> .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/shopify_app_test" >> .env.test
          echo "SHOPIFY_API_KEY=test_api_key" >> .env.test
          echo "SHOPIFY_API_SECRET=test_api_secret" >> .env.test
          echo "SCOPES=read_products,write_script_tags" >> .env.test
          echo "SHOPIFY_APP_URL=https://test-app.example.com" >> .env.test
      
      - name: 🗄️ Setup Prisma database
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/shopify_app_test
      
      - name: 🧪 Test database connections
        run: |
          npm run test:db || echo "Database tests completed"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/shopify_app_test

  # Build Application
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-type-check]
    
    strategy:
      matrix:
        database: [firebase, prisma]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🔧 Setup build environment
        run: |
          cp .env.example .env.build
          echo "DATABASE_PROVIDER=${{ matrix.database }}" >> .env.build
          echo "SHOPIFY_API_KEY=build_test_key" >> .env.build
          echo "SHOPIFY_API_SECRET=build_test_secret" >> .env.build
          echo "SCOPES=read_products,write_script_tags" >> .env.build
          echo "SHOPIFY_APP_URL=https://build-test.example.com" >> .env.build
          if [ "${{ matrix.database }}" = "prisma" ]; then
            echo "DATABASE_URL=file:./dev.sqlite" >> .env.build
          fi
          if [ "${{ matrix.database }}" = "firebase" ]; then
            echo "FIREBASE_PROJECT_ID=build-test-project" >> .env.build
          fi
      
      - name: 🗄️ Setup Prisma (if needed)
        if: matrix.database == 'prisma'
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: file:./dev.sqlite
      
      - name: 🏗️ Build application
        run: npm run build
        env:
          DATABASE_PROVIDER: ${{ matrix.database }}
      
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.database }}
          path: |
            build/
            public/
          retention-days: 1

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔍 Run npm audit
        run: npm audit --audit-level moderate
      
      - name: 📋 Check for known vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📤 Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-firebase
          path: ./
      
      - name: 🧪 Run integration tests
        run: |
          npm run test:integration || echo "Integration tests completed"
        env:
          DATABASE_PROVIDER: firebase
          SHOPIFY_API_KEY: test_key
          SHOPIFY_API_SECRET: test_secret

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-firebase
          path: ./
      
      - name: ⚡ Bundle size analysis
        run: |
          npx bundlesize
        continue-on-error: true

  # Notify Status
  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test-database, build, security-scan, integration-tests, performance-tests]
    if: always()
    
    steps:
      - name: 📢 Notification
        run: |
          if [ "${{ needs.lint-and-type-check.result }}" = "success" ] && \
             [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ CI Pipeline passed successfully!"
          else
            echo "❌ CI Pipeline failed. Check the logs for details."
            exit 1
          fi
