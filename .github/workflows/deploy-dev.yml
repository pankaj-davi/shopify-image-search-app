name: üß™ Deploy to Development

on:
  push:
    branches: [develop, feature/*]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Development environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - testing
      deploy_platform:
        description: 'Deployment platform'
        required: true
        default: 'railway'
        type: choice
        options:
          - railway
          - heroku
          - vercel
          - docker

env:
  NODE_VERSION: '20'
  DATABASE_PROVIDER: 'firebase'

jobs:
  # Development deployment
  deploy-dev:
    name: üß™ Deploy Development Environment
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîß Setup development environment
        run: |
          echo "Setting up development environment..."
          npm run setup:env development

          # Override with development values
          echo "NODE_ENV=development" >> .env
          echo "DATABASE_PROVIDER=firebase" >> .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.DEV_FIREBASE_PROJECT_ID }}" >> .env
          echo "FIREBASE_CLIENT_EMAIL=${{ secrets.DEV_FIREBASE_CLIENT_EMAIL }}" >> .env
          echo "FIREBASE_PRIVATE_KEY=${{ secrets.DEV_FIREBASE_PRIVATE_KEY }}" >> .env
          echo "SHOPIFY_API_KEY=${{ secrets.DEV_SHOPIFY_API_KEY }}" >> .env
          echo "SHOPIFY_API_SECRET=${{ secrets.DEV_SHOPIFY_API_SECRET }}" >> .env
          echo "SHOPIFY_APP_URL=${{ secrets.DEV_APP_URL }}" >> .env
          echo "SCOPES=read_products,write_script_tags,read_themes" >> .env

      - name: üß™ Run tests
        run: |
          npm run lint
          npm test || echo "Tests completed with warnings"

      - name: üèóÔ∏è Build application
        run: npm run build

      - name: üóÑÔ∏è Setup database
        run: |
          echo "Setting up development database..."
          npm run health:firebase || echo "Firebase connection test completed"
          npm run db:seed || echo "Database seeding completed"

      - name: üöÄ Deploy to Railway (Development)
        if: ${{ github.event.inputs.deploy_platform == 'railway' || github.event.inputs.deploy_platform == '' }}
        run: |
          echo "Deploying to Railway development environment..."

          # Install Railway CLI
          npm install -g @railway/cli

          # Authenticate with Railway using token
          if [ -z "${{ secrets.RAILWAY_TOKEN }}" ]; then
            echo "‚ùå RAILWAY_TOKEN secret is not set!"
            echo "Please add RAILWAY_TOKEN to your GitHub repository secrets"
            echo "Get your token from: https://railway.app/account/tokens"
            exit 1
          fi

          echo "${{ secrets.RAILWAY_TOKEN }}" | railway login --token

          # Check if project exists or create/link it
          railway environment development || railway environment create development

          # Deploy the application
          railway up --detach

          echo "‚úÖ Railway deployment initiated!"
          echo "üîó Check deployment status at: https://railway.app"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: üü£ Deploy to Heroku (Development)
        if: ${{ github.event.inputs.deploy_platform == 'heroku' }}
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.DEV_HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false

      - name: ‚ñ≤ Deploy to Vercel (Development)
        if: ${{ github.event.inputs.deploy_platform == 'vercel' }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.DEV_VERCEL_PROJECT_ID }}

      - name: üê≥ Deploy with Docker (Development)
        if: ${{ github.event.inputs.deploy_platform == 'docker' }}
        run: |
          echo "Building and deploying Docker container..."
          docker build -f Dockerfile.staging -t shopify-app:dev .

          # Tag and push to registry (if configured)
          if [ ! -z "${{ secrets.DOCKER_REGISTRY }}" ]; then
            docker tag shopify-app:dev ${{ secrets.DOCKER_REGISTRY }}/shopify-app:dev
            echo "${{ secrets.DOCKER_REGISTRY_TOKEN }}" | docker login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_REGISTRY_USER }} --password-stdin
            docker push ${{ secrets.DOCKER_REGISTRY }}/shopify-app:dev
          fi

      - name: üîß Deploy Firebase Rules (Development)
        run: |
          echo "Deploying Firebase rules for development..."
          npm run firebase:rules development || echo "Firebase rules deployment completed"
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.DEV_FIREBASE_PROJECT_ID }}

      - name: üìä Post-deployment health check
        run: |
          echo "Running post-deployment health checks..."
          sleep 30  # Wait for deployment to be ready

          # Health check with retry
          for i in {1..5}; do
            if npm run health:check; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚è≥ Health check attempt $i failed, retrying..."
              sleep 10
            fi
          done

      - name: üìù Create deployment summary
        run: |
          echo "## üß™ Development Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Development" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ github.event.inputs.deploy_platform || 'railway' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY

          if [ ! -z "${{ secrets.DEV_APP_URL }}" ]; then
            echo "- **URL**: ${{ secrets.DEV_APP_URL }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: üîî Send notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" = "success" ]; then
            MESSAGE="‚úÖ Development deployment successful!"
            COLOR="good"
          else
            MESSAGE="‚ùå Development deployment failed!"
            COLOR="danger"
          fi

          if [ ! -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"$MESSAGE\",\"color\":\"$COLOR\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi

  # Development database backup
  backup-dev-db:
    name: üóÑÔ∏è Backup Development Database
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: success()

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üóÑÔ∏è Create database backup
        run: |
          echo "Creating development database backup..."
          npm run db:backup
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.DEV_FIREBASE_PROJECT_ID }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.DEV_FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.DEV_FIREBASE_PRIVATE_KEY }}

      - name: üì§ Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: dev-database-backup-${{ github.run_number }}
          path: '*.json'
          retention-days: 7
