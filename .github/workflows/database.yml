name: 🔧 Database Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Database action to perform'
        required: true
        type: choice
        options:
          - migrate
          - backup
          - restore
          - seed
          - reset
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      backup_name:
        description: 'Backup name (for restore action)'
        required: false
        type: string

env:
  NODE_VERSION: '20'

jobs:
  database-management:
    name: 🗄️ Database Management
    runs-on: ubuntu-latest

    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Setup environment
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "Setting up production environment..."
            echo "DATABASE_PROVIDER=firebase" >> $GITHUB_ENV
            echo "FIREBASE_PROJECT_ID=${{ secrets.PRODUCTION_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "FIREBASE_CLIENT_EMAIL=${{ secrets.PRODUCTION_FIREBASE_CLIENT_EMAIL }}" >> $GITHUB_ENV
            echo "FIREBASE_PRIVATE_KEY=${{ secrets.PRODUCTION_FIREBASE_PRIVATE_KEY }}" >> $GITHUB_ENV
          else
            echo "Setting up staging environment..."
            echo "DATABASE_PROVIDER=firebase" >> $GITHUB_ENV
            echo "FIREBASE_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
            echo "FIREBASE_CLIENT_EMAIL=${{ secrets.STAGING_FIREBASE_CLIENT_EMAIL }}" >> $GITHUB_ENV
            echo "FIREBASE_PRIVATE_KEY=${{ secrets.STAGING_FIREBASE_PRIVATE_KEY }}" >> $GITHUB_ENV
          fi

      - name: 🗄️ Execute database action
        run: |
          case "${{ github.event.inputs.action }}" in
            "migrate")
              echo "🔄 Running database migrations..."
              if [ "$DATABASE_PROVIDER" = "prisma" ]; then
                npx prisma migrate deploy
              else
                echo "No migrations needed for Firebase"
              fi
              ;;
            "backup")
              echo "💾 Creating database backup..."
              npm run db:backup
              ;;
            "restore")
              if [ -n "${{ github.event.inputs.backup_name }}" ]; then
                echo "🔄 Restoring from backup: ${{ github.event.inputs.backup_name }}"
                npm run db:restore -- --backup="${{ github.event.inputs.backup_name }}"
              else
                echo "❌ Backup name required for restore action"
                exit 1
              fi
              ;;
            "seed")
              echo "🌱 Seeding database..."
              npm run db:seed
              ;;
            "reset")
              if [ "${{ github.event.inputs.environment }}" = "production" ]; then
                echo "❌ Database reset not allowed in production!"
                exit 1
              fi
              echo "🔄 Resetting database..."
              npm run db:reset
              ;;
            *)
              echo "❌ Unknown action: ${{ github.event.inputs.action }}"
              exit 1
              ;;
          esac
        env:
          DATABASE_PROVIDER: ${{ env.DATABASE_PROVIDER }}
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          FIREBASE_CLIENT_EMAIL: ${{ env.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY: ${{ env.FIREBASE_PRIVATE_KEY }}

      - name: 📊 Generate report
        run: |
          echo "📊 Database Management Report"
          echo "=============================="
          echo "Action: ${{ github.event.inputs.action }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Database Provider: $DATABASE_PROVIDER"

          if [ "${{ github.event.inputs.action }}" = "backup" ]; then
            echo "Backup Name: backup-$(date +%Y%m%d-%H%M%S)"
          fi

      - name: 📢 Notify completion
        run: |
          echo "✅ Database action '${{ github.event.inputs.action }}' completed successfully!"
        if: success()

      - name: 📢 Notify failure
        run: |
          echo "❌ Database action '${{ github.event.inputs.action }}' failed!"
        if: failure()
